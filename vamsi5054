import numpy as np
import pandas as pd
from sklearn.model_selection import
train_test split
from sklearn.linear_model import
standardscaler
from skleqarn.linear_model import
linearregression
from sklearn.metrics import
mean_squared_error
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
data=pd.read_csv('house_prices.csv')
x=data.drop('target_column',axis=1)
y=data['target_column']
x_train,x_test,y_tarin.y_test=train_test_split(x,y,test size=0.2,random_state
scaler=standardscaler()
x_train_scaled=scaler.fit_transform(x_train)
x_test_scaled=scaler.transform(x_test)
ir_model=linearregression()
ir_model.fit(x_train_scaled,y_train)
y_pred=ir_model.predict(x_test_scaled)
mse=mean_squared_error(y_test,y_pred)
print(f'mean squared error:{mse}')
model=keras.sequential([
layers.dense(64,activation='relu',
input_shape=(x_train_scaled.shape[1],)),
layers.dense(1)
])
model.compile(optimizer='adam',
loss='mean_sqared_error')
model.fit(x_trained_scaled,y_train,epochs=10,batch_size=32,validation_split=0.2)
nn_mse=model.evaluate(x_test_scaled,y_test)
print(f'neural network mean squared error:{nn_mse}')
